1. 整体架构概述
这个系统是一个模块化设计的Petersen音阶播放器，核心目标是实现比12平均律更精确的频率播放，同时提供丰富的音效、表现力和演奏模式。

整体架构采用分层设计：
核心层：FluidSynth集成（底层音频引擎）
功能层：精确频率播放、音效处理、表现力控制、SoundFont管理
应用层：演奏模式、主API接口
工具层：分析工具、常量定义、预设管理

主要依赖：
FluidSynth库（跨平台音频合成）
Python 3.7+（支持dataclass、类型注解）
SoundFont文件（音源库）

系统优势：
模块化：每个功能独立，便于维护和扩展
精确性：支持Petersen音阶的微分音差异
灵活性：多种演奏模式和音效预设
兼容性：内置备用方案（如CC控制器）

2. 各模块详细说明

以下是按依赖关系梳理的模块结构：

工具层 (utils/)

constants.py：
定义系统常量，如MIDI控制器编号（CC_CONTROLLERS）、预设参数（REVERB_PARAMS）、默认播放参数（DEFAULT_PLAY_PARAMS）。
作用：集中管理魔法数字，避免硬编码。
关键内容：乐器分类、音效阈值、频率容差等。

presets.py：
定义预设组合，如COMPLETE_PRESET_COMBINATIONS（音效+表现力组合）。
作用：提供开箱即用的配置，便于用户快速应用。
关键内容：预设名称、描述、使用场景。

analysis.py：
提供分析工具，如FrequencyAnalyzer（频率分析）、analyze_petersen_scale_characteristics（音阶特性分析）。
作用：计算频率偏差、音阶统计、优化建议。
关键内容：MIDI音符查找、偏差计算、特性提取。

功能层

frequency_accurate.py：
核心功能：实现Petersen音阶的精确播放。
关键类：FrequencyAccuratePlayback（精确频率播放控制器）。
主要方法：
prepare_accurate_note()：计算目标频率与MIDI音符的偏差，并生成弯音轮值。
play_accurate_note()：播放单个音符，支持频率补偿。
play_accurate_sequence()：播放序列，支持力度、时值、间隔控制。
analyze_frequency_accuracy()：分析频率精确度需求。
逻辑：通过弯音轮（pitch bend）补偿12平均律的偏差，实现精确频率。

audio_effects.py：
核心功能：高级音效处理（混响、合唱、控制器参数）。
关键类：AdvancedAudioEffects（音效控制器）。
主要方法：
apply_effect_preset()：应用预设（如"hall"、"cathedral"）。
_apply_reverb() / _apply_chorus()：设置内置音效或备用CC控制器。
optimize_for_soundfont()：根据SoundFont特性自动优化音效。
逻辑：优先使用FluidSynth内置API，失败时回退到MIDI CC控制器。

expression_control.py：
核心功能：表现力控制（力度曲线、节奏变化、踏板控制）。
关键类：ExpressionController（表现力控制器）。
主要方法：
calculate_expression_sequence()：计算力度、时值、间隔序列。
apply_expression_preset()：应用预设（如"romantic"、"jazz"）。
apply_pedal_control()：控制延音/弱音踏板。
逻辑：根据动态模式（crescendo、arch）和节奏风格（rubato、swing）生成表现力参数。

soundfont_manager.py：
核心功能：SoundFont文件管理（扫描、加载、分析）。
关键类：SoundFontManager（SoundFont管理器）。
主要方法：
_scan_soundfonts()：扫描目录中的.sf2文件。
load_soundfont()：加载SoundFont并获取乐器信息。
get_best_soundfont_for_task()：为特定任务推荐最佳SoundFont。
逻辑：分析文件大小、类型，评估质量分数，提取乐器列表。

应用层

performance_modes.py：
核心功能：多种演奏模式（钢琴独奏、管弦乐、对比演示、教育模式）。
关键类：PerformanceModes（演奏模式控制器）。
主要方法：
execute_solo_piano_mode()：钢琴独奏，支持不同风格。
execute_orchestral_mode()：管弦乐演奏，分配频率到不同乐器。
execute_comparison_demo()：对比演示（如12平均律 vs Petersen）。
逻辑：整合频率播放、音效、表现力，执行完整演奏流程。

enhanced_petersen_player.py：
核心功能：主API接口，整合所有模块。
关键类：EnhancedPetersenPlayer（增强播放器）。
主要方法：
play_frequencies()：高级播放接口。
play_petersen_scale()：专用Petersen音阶播放。
demonstrate_frequency_accuracy()：精确度演示。
get_system_status()：获取系统状态。
逻辑：初始化FluidSynth，协调各模块，提供统一接口。

3. 系统工作流程
初始化：EnhancedPetersenPlayer 创建时，初始化FluidSynth，加载各模块。
SoundFont加载：扫描目录，选择/加载合适的SoundFont。
播放准备：根据演奏模式，应用音效和表现力预设。
频率处理：将Petersen频率转换为MIDI音符 + 弯音轮补偿。
演奏执行：按模式播放序列，应用实时表现力控制。
分析与优化：实时分析频率精确度，提供优化建议。
